?summary.matrix
getS3method(summary, matrix)
getS3method("summary", matrix)
getS3method("summary", "matrix")
getS3method("summary", "data.frame")
methods(summary)
summary.matrix
summary.data.frame
?summary.data.frame
xtable(summary(t(jellyBeans)))
library(xtable)
library(slidify)
library(xtable)
options(xtable.type='html')
xtable(summary(t(jellyBeans[,1:10])))
source('~/.active-rstudio-document', echo=TRUE)
dim(jellyBeans)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(31)
nColors <- 200
nObs <- 100
jellyBeans <- matrix(rnorm(nObs*nColors), ncol=nColors)
fishing4News <- apply(jellyBeans, 2, function(x) t.test(x)$p.value)
options(xtable.type='html')
dim(xtable(summary(jellyBeans)))
dim(xtable(summary(jellyBeans[,1:10])))
?xtable
names((summary(jellyBeans[,1:10]))
)
names((summary(jellyBeans[,1:10])))
colnames((summary(jellyBeans[,1:10])))
rownames((summary(jellyBeans[,1:10])))
class((summary(jellyBeans[,1:10])))
summary(jellyBeans[,1:10])
t(summary(jellyBeans[,1:10]))
rownames((summary(jellyBeans[,1:10])))
colnames((summary(jellyBeans[,1:10])))
q()
library(slidify)
library(slidifyLibraries)
q()
library(slidify)
getwd()
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
setwd("~/juicy/BioStatWork2012/mytex/journalClub/Reproducibility/repBioInfo")
slidify("index.Rmd")
browseURL("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
getwd()
browseURL("index.html")
hist(rnorm(100))
rgb(.5,0,1)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour="blue", fill="#FFFF66", size=.7) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, args=list(shape=7), colour = jpurp)
library(ggplot2)
joran <- rgb(.8,.4,0)
jpurp <- rgb(.5,0,1)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour="blue", fill="#FFFF66", size=.7) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, args=list(shape=7), colour = jpurp)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour="blue", fill="#FFFF66", size=.7) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, colour = jpurp)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour="blue", fill="#FFFF66", size=.7) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, colour = jpurp, size=.7)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour="blue", fill="#FFFF66", size=.7) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, colour = jpurp, size=1.5)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour="blue", fill="#FFFF66", size=.7) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, colour = jpurp, size=1)
nS <- 1000; y <- data.frame(index = (1:nS), normS=rnorm(nS))
ggplot(y, aes(x=normS)) + geom_histogram(aes(y=..density..),
binwidth=.2, colour="darkblue", fill="white") +
geom_density(alpha=.1, colour=joran, fill="#FFFF66", size=.8) +
labs(y="", x="", title="Kernel density estimation") +
stat_function(fun = dnorm, colour = jpurp, size=.8)
q()
library("slidify")
author("mydeck")
getwd()
setwd("~/juicy/BioStatWork2012/mytex/journalClub/Reproducibility/repBioInfo")
getwd()
purl("gettingTheNews.Rnw")
library(knitr)
purl("gettingTheNews.Rnw")
purl("index.R")
purl("index.Rmd")
knit("gettingTheNews.Rmd")
markdownToHTML("gettingTheNews.md")
library(markdown)
knit("gettingTheNews.Rmd")
markdownToHTML("gettingTheNews.md")
knit2html("gettingTheNews.Rmd")
knit("gettingTheNews.Rnw")
library(tools)
texi2pdf("gettingTheNews.tex")
q()
library(slidify)
rnorm(2)
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
q()
q()
library(slidify)
q()
rnorm(1)
q()
q()
library(slidify)
q()
q()
q()
library(slidify)
2000/8
q()
32/5
6.4*24
7*6.4
153.6-44.8
108.8/24
q()
400/55
400/60
95*6
q()
library(slidify)
q()
q()
q()
plot(cars)
text(cars[c(23,49),1],cars[c(23,49),2]+4,c(23,49))
abline(lm(dist~speed,data=cars))
abline(lm(dist~speed,data=cars[-23,]),col="red")
abline(lm(dist~speed,data=cars[-49,]),col="blue")
US=read.table("http://freakonometrics.free.fr/US.txt",sep=";")
reg=lm(Murder~.,data=US)
regs=step(reg)
?step
set.seed(2)
x=rnorm(500)
boxplot(x,horizontal=TRUE,axes=FALSE)
axis(1)
boxplot(x,horizontal=TRUE,xlim=c(-1,1.3),axes=FALSE)
axis(1)
Q=quantile(x,c(.25,.75))
y=cut(x[(x>=Q[1])&(x<=Q[2])],seq(Q[1],Q[2],length=11))
tb=table(y)
u=seq(Q[1],Q[2],length=11)
umid=(u[1:10]+u[2:11])/2
for(i in 1:10) segments(umid[i],1-.2,umid[i],1-.2-tb[i]/20,lwd=3)
du=diff(umid)[1]
y=cut(x,seq(Q[1]-du*8,Q[2]+du*8,length=11+16))
tb=table(y)
u=seq(Q[1]-du*8,Q[2]+du*8,length=11+16)
umid=(u[1:26]+u[2:27])/2
for(i in 1:8) segments(umid[i],1,umid[i],1-.2-tb[i]/20,lwd=3)
for(i in 19:26) segments(umid[i],1,umid[i],1-.2-tb[i]/20,lwd=3)
vu=seq(-2.5,2.5,by=.02)
vv=dnorm(vu)
lines(vu,1-vv*4,col="red",lty=2)
d=density(x,bw=.1)
lines(d$x,1-d$y*4,col="red")
lines(d$x,1,col="red")
lines(d$x,d$y,col="red")
lines(vu,vv,col="red",lty=2)
lines(d$x,1-d$y*10,col="red")
lines(d$x,1-d$y*5,col="red")
q()
if (!file.exists("bottomly_eset.RData")) download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData","bottomly_eset.RData")
load("bottomly_eset.RData")
library("Biobase")
exprs(bottomly.eset)[1,]
pData(bottomly.eset)
Y <- log2(exprs(bottomly.eset) + 0.5)
# library(devtools)
# install_github("rafalib","ririzarr")
library("rafalib")
mypar(1,1)
for(i in 1:ncol(Y)){
shist(Y[,i],unit=0.25,col=i,plotHist=FALSE,add=i!=1)
}
q()
library(pcalg)
?pc
q()
gamma(231)
lgamma(231)
?lgamma
sum(log(c(2:230)))
231*log(231)
231*log(230)
e
exp(1)
pi
99.30+115.30
99.30+115.30+85+101
q()
416/1.1
378.18.18+37.1818
378.1818+37.1818
378.1818+37.81818
q()
install.packages("devtools")
library(devtools)
install_github("rafalib","ririzarr")
install_github("dagdata","genomicsclass")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("genefilter")
install.packages("MASS")
biocLite("hgfocus.db")
biocLite("sva")
biocLite("limma")
library(rafalib)
library(dagdata)
library(Biobase)
library(genefilter)
data(GSE5859)
library(hgfocus.db)
chr<-mget(featureNames(e),hgfocusCHRLOC)
chr <- sapply(chr,function(x){ tmp<-names(x[1]); ifelse(is.null(tmp),NA,paste0("chr",tmp))})
y<- colMeans(exprs(e)[which(chr=="chrY"),])
sex <- ifelse(y<4.5,"F","M")
e
annotation(e)
batch <- format(pData(e)$date,"%y%m")
ind<-which(batch%in%c("0506","0510"))
set.seed(1)
N <- 12; N1 <-3; M<-12; M1<-9
ind <- c(sample(which(batch=="0506" & sex=="F"),N1),
sample(which(batch=="0510" & sex=="F"),N-N1),
sample(which(batch=="0506" & sex=="M"),M1),
sample(which(batch=="0510" & sex=="M"),M-M1))
table(batch[ind],sex[ind])
set.seed(1)
tt<-genefilter::rowttests(exprs(e)[,ind],factor(batch[ind]))
ind1 <- which(chr=="chrY") ##real differences
ind2 <- setdiff(c(order(tt$dm)[1:25],order(-tt$dm)[1:25]),ind1)
ind0 <- setdiff(sample(seq(along=tt$dm),50),c(ind2,ind1))
geneindex<-c(ind2,ind0,ind1)
mat<-exprs(e)[geneindex,ind]
mat <- mat-rowMeans(mat)#;mat[mat>3]<-3;mat[mat< -3]<- -3
icolors <- rev(brewer.pal(11,"RdYlBu"))
mypar(1,1)
image(t(mat),xaxt="n",yaxt="n",col=icolors)
dat <- exprs(e)[,ind]
X <- sex[ind] ## the covariate
Z <- batch[ind]
tt<-genefilter::rowttests(dat,factor(X))
HLIM<-c(0,1500)
mypar(1,2)
hist(tt$p[!chr%in%c("chrX","chrY")],nc=20,xlab="p-value",ylim=HLIM,main="")
hist(tt$p[chr%in%c("chrY")],nc=20,xlab="p-value",ylim=c(0,9),main="")
library(sva)
mod<-model.matrix(~X)
cleandat <- ComBat(dat,Z,mod)
tt<-genefilter::rowttests(cleandat,factor(X))
mypar(1,1)
hist(tt$p[!chr%in%c("chrX","chrY")],nc=20,xlab="p-value",ylim=HLIM,main="")
hist(tt$p[chr%in%c("chrY")],nc=20,xlab="p-value",ylim=c(0,9),main="")
times <- (pData(e)$date)
mypar(1,2)
o=order(times)
plot(times[o],pch=21,bg=as.fumeric(batch)[o],ylab="date")
o=order(times[ind])
plot(times[ind][o],pch=21,bg=as.fumeric(batch)[ind][o],ylab="date")
library(dagdata)
data(tissuesGeneExpression)
library(rafalib)
group <- as.fumeric(tab$Tissue)
ls()
?as.fumeric
x <- t(e)
pc <- prcomp(x)
# ?prcomp
names(pc)
plot(pc$x[,1], pc$x[,2], col=group, main="PCA", xlab="PC1", ylab="PC2")
cx <- sweep(x, 2, colMeans(x), "-")
sv <- svd(cx)
names(sv)
plot(sv$u[,1], sv$u[,2], col=group, main="SVD", xlab="U1", ylab="U2")
sv$v[1:5,1:5]
pc$rotation[1:5,1:5]
x = matrix(c(81, 79, 12, 41, 22, 25, 3, 18, 63, 70, 45, 49, 95, 57, 28, 35, 100, 54, 15, 14, 50, 61, 40, 55, 32, 67, 21, 88, 85, 47, 48, 64, 90, 69, 53, 2, 20, 10, 29, 23, 8, 17, 24, 72, 75, 76, 6, 42, 51, 27, 96, 16, 65, 33, 77, 74, 66, 94, 93, 39, 73, 71, 80, 56, 31, 99, 26, 7, 1, 43, 52, 30, 83, 13, 44, 62, 91, 5, 46, 78, 97, 87, 84, 82, 98, 11, 68, 4, 86, 38, 60, 58, 34, 59, 89, 36, 37, 19, 92, 9), nrow=10)
pc = prcomp(x)
z = as.matrix(dist(x))
mean((y-z)^2).
mean((y-z)^2)
x
as.matrix(dist(pc$x[,1:5]))
as.matrix(dist(pc$x[,6:10]))
as.matrix(dist(pc$x[,1:2]))
z
as.matrix(dist(pc$x[,1:5]))
z
z
as.matrix(dist(pc$x[,1:5]))
z = as.matrix(dist(x))
z
z = as.matrix(dist(pc$x))
z
z = as.matrix(dist(x))
z
y <- as.matrix(dist(pc$x[,1:2]))
mean((y-z)^2)
y1 <- as.matrix(dist(pc$x[,1:2]))
y <- as.matrix(dist(pc$x[,1:5]))
mean((y-z)^2)
pc$sdev^2
?prcomp
pc$sdev^2[1]/sum(pc$sdev^2)
sum(pc$sdev^2)
pc$sdev^2[1]
(pc$sdev^2)[1]
(pc$sdev^2)[1]/sum(pc$sdev^2)
p = 10^seq(from=-6, to=-1, length=1000)
sum(p.adjust(p, method="bonferroni") < .05)
sum(p < .05/1000)
p = runif(1000)
p = sort(p)
padj = p.adjust(p, method="BH")
padj
any(padj>p)
all(padj>p)
which(padj>p)
which(padj<p)
any(padj<p)
sum(padj)
order(padj)
q()
library(devtools)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("GEOquery")
biocLite("limma")
biocLite("org.Hs.eg.db")
biocLite("GO.db")
biocLite("SpikeInSubset")
biocLite("genefilter")
biocLite("rae230a.db")
biocLite("AnnotationDbi")
biocLite("biomaRt")
q()
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2,each=3))
rep(1:2,each=3)
library(genefilter)
rtt <- rowttests(exprs(rma95),fac)
dim(exprs(rma95))
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2,each=2))
library(genefilter)
rtt <- rowttests(exprs(rma95),fac)
library(SpikeInSubset)
data(rma95)
fac <- factor(rep(1:2,each=3))
library(genefilter)
rtt <- rowttests(exprs(rma95),fac)
mask <- with(rtt, abs(dm) < .2 & p.value < .01)
spike <- rownames(rma95) %in% colnames(pData(rma95))
cols <- ifelse(mask,"red",ifelse(spike,"dodgerblue","black"))
with(rtt, plot(-dm, -log10(p.value), cex=.8, pch=16,
xlim=c(-1,1), ylim=c(0,5),
xlab="difference in means",
col=cols))
abline(h=2,v=c(-.2,.2), lty=2)
?dm
head(dm)
?with
rtt$s <- apply(exprs(rma95), 1, function(row) sqrt(.5 * (var(row[1:3]) + var(row[4:6]))))
with(rtt, plot(s, -log10(p.value), cex=.8, pch=16,
log="x",xlab="estimate of standard deviation",
col=cols))
library(limma)
fit <- lmFit(rma95, design=model.matrix(~ fac))
colnames(coef(fit))
fit <- eBayes(fit)
tt <- topTable(fit, coef=2)
tt
dim(topTable(fit, coef=2, number=Inf, sort.by="none"))
limmares <- data.frame(dm=coef(fit)[,"fac2"], p.value=fit$p.value[,"fac2"])
with(limmares, plot(dm, -log10(p.value),cex=.8, pch=16,
col=cols,xlab="difference in means",
xlim=c(-1,1), ylim=c(0,5)))
abline(h=2,v=c(-.2,.2), lty=2)
n <- 40
qs <- seq(from=0,to=.2,length=n)
idx <- sapply(seq_len(n),function(i) which(as.integer(cut(rtt$s^2,qs)) == i)[1])
idx <- idx[!is.na(idx)]
par(mar=c(5,5,2,2))
plot(1,1,xlim=c(0,.21),ylim=c(0,1),type="n",
xlab="variance estimates",ylab="",yaxt="n")
axis(2,at=c(.1,.9),c("before","after"),las=2)
segments((rtt$s^2)[idx],rep(.1,n),
fit$s2.post[idx],rep(.9,n))
biocLite("gaschYHS")
library(gaschYHS)
data(gaschYHS)
e = gaschYHS
source("http://bioconductor.org/biocLite.R")
biocLite("gaschYHS")
library(gaschYHS)
data(gaschYHS)
e = gaschYHS
anyNA = function(x) any(is.na(x))
e = e[,1:8]
e = e[!apply(exprs(e), 1, anyNA),]
condition = factor(rep(1:2,c(5,3)))
fit <- lmFit(e, design=model.matrix(~ condition))
colnames(coef(fit))
fit <- eBayes(fit)
tt <- topTable(fit, coef=2)
tt
e = e[,1:5]
time = pData(e)$time
tt["YDR171W",]
tt["YDR171W","t"]
design = model.matrix(~ time + I(time^2))
fit <- lmFit(e, design)
colnames(coef(fit))
fit <- eBayes(fit)
tt <- topTable(fit, coef=2)
tt
tt["YGR211W",]
colnames(coef(fit))
fit <- eBayes(fit)
tt <- topTable(fit, coef=2:3)
tt
tt["YGR211W",]
var(rowMeans(matrix(rnorm(10000 * 10, 0, 1), ncol=10)))
library(MASS)
Sigma = matrix(.7, ncol=10, nrow=10)
diag(Sigma) = 1
mvrnorm(n=1,mu=rep(0,10),Sigma=Sigma)
matNorm <- mvrnorm(n=10000,mu=rep(0,10),Sigma=Sigma)
var(rowMeans(matNorm))
matNorm <- mvrnorm(n=10000,mu=rep(0,10),Sigma=Sigma)
var(rowMeans(matNorm))
q()
q()
q()
q()
q()
library("slidify")
slidify("index.Rmd")
getwd()
q()
q()
getwd()
publish(user="annlia", repo="repro")
library(slidify)
publish(user="annlia", repo="repro")
publish(user="annlia", repo="repro")
publish(user="annlia", repo="repro")
publish(user="annlia", repo="reproduce")
q()
getwd()
library(slidify)
publish(user="annlia", repo="reproduce")
publish(user="annlia", repo="reproduce")
publish(title = 'reproducibility', 'index.html', host = 'rpubs')
library(slidify)
slidify(index)
slidify("index.Rmd")
slidify("index.Rmd")
library(knitr)
slidify("index.Rmd")
knitr(index.Rmd)
knit(index.Rmd)
knit("index.Rmd")
slidify("index.Rmd")
publish(title = 'reproducibility', 'index.html', host = 'rpubs')
getwd()
publish(user="annlia", repo="reproduce")
publish(user="annlia", repo="reproduce")
1066.39-103.05
publish(user="annlia", repo="reproduce")
slidify("index.Rmd")
publish(title = 'reproducibility', 'index.html', host = 'rpubs')
q()
